State Init {
      > Telemetry Start
   +1 > Laser Set Scan Start 180
      > Laser Set Scan Stop 265
      > Laser Set Scan Step 0.25
      > Laser Set Offline Delta 55
      > Laser Set Online Dither 0.1
      > Laser Set Online Position 185
      > Laser Chop NPts Online 50
      > Laser Chop NPts Offline 50
      > Laser Drift Limit Set 40
#     > TFL Set Pump Diode Current 3 A
#     > TFL Set Seed Diode 1 Current 109 mA
#     > TFL Set Seed Diode 1 Temperature 4.6 C
#     > TFL Set SHG Temperature 27.94 C
#     > TFL Set THG Temperature 33.07 C
      > Meerstetter THG Live Setpoints Enable
      > SWStat Chop Dither Enable
      Hold until (SWStat != 0) or 2;
      Hold until (SWStat == 0) or 2;
      > SWStat THG Peakup Enable
      Hold until (SWStat != 0) or 2;
      Hold until (SWStat == 0) or 2;
      Hold until valid (PPS_rate_synch);
  +5  { if (FC0_Set == 0 && !(FCC0_Status&(1<<3)) ) {
          /*  Valve 1 is off and Zero Flow setpoint is zero */
          Validate Auto_Start;
        } else {
          Validate Daily_Saverun_Disable;
        }
      }
}

State Auto_Start {
  Hold until (SWStat == 0) or 2;
  > SWstat Pressure Control Activate
  Hold until (SWStat != 0) or 2;
  Hold until (SWStat == 0) or 2;
  > SWstat Chop Start 30 minute scan interval
  Hold until (SWStat != 0) or 2;
  Hold until (SWStat == 0) or 2;
  Validate Daily_Saverun_Enable;
}

State Daily_Saverun_Disable {}

%{
  /* This definition is in UTC hours between 0 and 24,
     although the selected time should not be too close to
     either limit of the range, since we want to be
     able to detect time both before and after the specified
     hour.
   */
  #define DAILY_SAVERUN_TIME_UTC_HOURS 21.0
%}
State Daily_Saverun_Enable {
   +1 > Log Advancing to Daily_Saverun_Prepending
      Validate Daily_Saverun_Prepending;
}

State Daily_Saverun_Prepending NoLog {
  # Wait until time is before the shutdown time
  +10 { uint32_t unixtime;
        uint32_t ssm;
        unixtime = itime();
        ssm = unixtime % 86400;

        if (ssm < 3600*DAILY_SAVERUN_TIME_UTC_HOURS) {
          msg(0, "Advancing to Daily_Saverun_Pending");
          Validate Daily_Saverun_Pending;
        } else {
          Validate Daily_Saverun_Prepending;
        }
      }
}

State Daily_Saverun_Pending NoLog {
  # Wait until time is after the shutdown time
  +10 { uint32_t unixtime;
        uint32_t ssm;
        unixtime = itime();
        ssm = unixtime % 86400;

        if (ssm >= 3600*DAILY_SAVERUN_TIME_UTC_HOURS) {
          Validate Daily_Saverun;
        } else {
          Validate Daily_Saverun_Pending;
        }
      }
}

State Daily_Saverun {
  > SaveLog Daily Saverun
  Validate Full_Shutdown;
}

State Full_Shutdown {
  Hold Until Valid (Chop_Idle) or 35:00;
  Validate Shutdown;
}

State Shutdown {
  +2 > Quit
}

Partition

%{
  #include "dasio/cmd_writer.h"
  double PPS_integral;
  #define GP 1.1e4
  #define GI 1e3
  #define PPS_CLIP_LIMIT 30000
  #define PPS_INT_LIMIT (PPS_CLIP_LIMIT/GI)
  #define PPS_SETPOINT (3.0)
  /* UpdatePeriod = 5; */
%}

State PPS_synch_init {
  +10 > Log Initiating PPS Synchronization
      Validate PPS_synch;
}

State PPS_idle {}

State PPS_synch nolog {
  { if (PPS_min_drift > PPS_SETPOINT &&
        PPS_min_drift < PPS_SETPOINT+3.000) {
      Validate PPS_rate_synch;
    } else if (PPS_min_drift < PPS_SETPOINT &&
        PPS_min_drift > PPS_SETPOINT-75.0) {
      Validate PPS_synch3;
    }
  }
  +1 > PPS Offset Adjust 30000
  +7 Validate PPS_synch;
}

State PPS_synch3 nolog {
   +1 { double adj;
        if (PPS_min_drift > PPS_SETPOINT) {
          Validate PPS_rate_synch;
        } else {
          uint16_t adju;
          adj = (PPS_SETPOINT+2.0-PPS_min_drift)*400;
          if (adj > 30000) adj = 30000;
          adju = adj;
          ci_sendfcmd(Cmd_Send, "PPS Offset Adjust %u\n", adju);
        }
      }
   +7 Validate PPS_synch3;
}

State PPS_rate_synch {
  > BCtr 2 Enable
  {
    PPS_integral = PPS_integral + (PPS_min_drift-PPS_SETPOINT);
    if (PPS_integral > PPS_INT_LIMIT) PPS_integral = PPS_INT_LIMIT;
    else if (PPS_integral < -PPS_INT_LIMIT) PPS_integral = -PPS_INT_LIMIT;
  }
  { double rate_adj;
    rate_adj = (PPS_min_drift-PPS_SETPOINT) * GP + PPS_integral * GI;
    if (rate_adj > PPS_CLIP_LIMIT) rate_adj = PPS_CLIP_LIMIT;
    else if (rate_adj < -PPS_CLIP_LIMIT) rate_adj = -PPS_CLIP_LIMIT;
    if (rate_adj != PPS_fine)
      ci_sendfcmd(Cmd_Send_Quiet, "PPS Rate Adjust %.0lf\n", rate_adj);
  }
}

Partition
# Automatically start flows and other functions at a specified time of day (such as early morning to allow for equilibration)
# Currently hard-coded for 5:00 in the morning (10:00 UTC)
# ssm is seconds since midnight

State Overnight_Flow_Idle{
}

State Overnight_Flow NoLog {
  +10 { uint32_t unixtime;
        uint32_t ssm;
        unixtime = itime();
        ssm = unixtime % 86400;

        if (ssm >= 3600*9.0) {
          Validate Overnight_Flow_Execute;
        } else {
          Validate Overnight_Flow;
        }
      }
}

State Overnight_Flow_Execute{
	> Valve 1 On
	> Flow Span Set SCCM 35
	Validate Overnight_Flow_Idle;
}

Partition

%{
  double CellP_integral;
  #define CELLP_GP (50)
  #define CELLP_GI (20)
  #define CELLP_CLIP_LIMIT 10000
  #define CELLP_INT_LIMIT (CELLP_CLIP_LIMIT/CELLP_GI)
  #define CELLP_SETPOINT (115.0)
  /* UpdatePeriod = 5; */
%}

State CellP_idle {}

State CellP_control nolog {
  +1
  { double err_term, rate_adj;
    err_term = (convert(OmegaP)-CELLP_SETPOINT);
    CellP_integral += err_term;
    if (CellP_integral > CELLP_INT_LIMIT)
      CellP_integral = CELLP_INT_LIMIT;
    else if (CellP_integral < -CELLP_INT_LIMIT)
      CellP_integral = -CELLP_INT_LIMIT;
    rate_adj = 5000 - err_term * CELLP_GP -
      CellP_integral * CELLP_GI;
    if (rate_adj > CELLP_CLIP_LIMIT)
      rate_adj = CELLP_CLIP_LIMIT;
    else if (rate_adj < 0) rate_adj = 0;
    if (rate_adj != FC2_Set)
      ci_sendfcmd(Cmd_Send_Quiet, "Flow Bypass Set SCCM %.0lf\n", rate_adj);
    Validate CellP_control;
  }
}


Partition
# Assign steps for blank runs and runs with leaves


State LC_Steps_Idle {
			> Flag Set 0
}

State LC_Steps {
            > Flag Set 50
+09:50      > Flag Set 51
+15:00      > Flag Set 0
            Validate LC_Steps_Idle;
}

Partition
# This partition tracks scans, locating the laser voltage
# corresponding to the peak normalized counts from the reference cell.
# If peak-finding is enabled, it sets the online position after the
# scan.

%{
  #include <stdbool.h>
  bool find_peak = true;
%}

{
  int scanning;
  double max_norm_ref_cts;
  HtrDAC_mV_t cur_peak_laser_V, peak_laser_V;

  depending on (t_z4) {
    if (LVstat_z4 & 1) {
      if (scanning == 0) {
        scanning = 1;
        max_norm_ref_cts = norm_ref_cts_z4;
        cur_peak_laser_V = LaserV_z4;
      } else {
        if (norm_ref_cts_z4 > max_norm_ref_cts) {
          max_norm_ref_cts = norm_ref_cts_z4;
          cur_peak_laser_V = LaserV_z4;
        }
      }
    }
  }
}

State Laser_Scan_Watch {
  hold until (t_z4 && (LVstat_z4 & 1));
  hold until (t_z4 && !(LVstat_z4 & 1));
  { if (find_peak && scanning) {
      peak_laser_V = cur_peak_laser_V;
      if (convert(peak_laser_V) > convert(LV_online)+Drift_Limit ||
          convert(peak_laser_V) < convert(LV_online)-Drift_Limit) {
        msg(2,
         "Peak detected at %.1lf mV outside drift limit %d from %.1lf",
         convert(peak_laser_V), Drift_Limit, convert(LV_online));
      } else {
        ci_sendfcmd(Cmd_Send, "Laser Set Online Position %.1lf\n",
           convert(peak_laser_V));
      }
    }
    scanning = 0;
    Validate Laser_Scan_Watch;
  }
}

Partition
# This partition controls chopping and scanning

State Chop_Idle {}

State Chop_Period_1 {
      > Laser Command Scan Start
      Hold Until (t_z4 && (LVstat_z4 & 1));
      Hold Until (t_z4 && !(LVstat_z4 & 1) && !scanning);
      Depending on (Full_Shutdown) { Validate Chop_Idle; }
   +1 > Laser Command Chop Mode Begin
      Hold Until (SWStat == SWS_TIMEWARP) or 1:00;
      Validate Chop_Period_1;
}

State Chop_Period_5 {
      > Laser Command Scan Start
      Hold Until (t_z4 && (LVstat_z4 & 1));
      Hold Until (t_z4 && !(LVstat_z4 & 1) && !scanning);
      Depending on (Full_Shutdown) { Validate Chop_Idle; }
   +1 > Laser Command Chop Mode Begin
      Hold Until (SWStat == SWS_TIMEWARP) or 5:00;
      Validate Chop_Period_5;
}

State Chop_Period_10 {
      > Laser Command Scan Start
      Hold Until (t_z4 && (LVstat_z4 & 1));
      Hold Until (t_z4 && !(LVstat_z4 & 1) && !scanning);
      Depending on (Full_Shutdown) { Validate Chop_Idle; }
   +1 > Laser Command Chop Mode Begin
      Hold Until (SWStat == SWS_TIMEWARP) or 10:00;
      Validate Chop_Period_10;
}

State Chop_Period_30 {
      > Laser Command Scan Start
      Hold Until (t_z4 && (LVstat_z4 & 1));
      Hold Until (t_z4 && !(LVstat_z4 & 1) && !scanning);
      Depending on (Full_Shutdown) { Validate Chop_Idle; }
   +1 > Laser Command Chop Mode Begin
      Hold Until (SWStat == SWS_TIMEWARP) or 30:00;
      Validate Chop_Period_30;
}

State Chop_Stop {
  > Laser Command Chop Mode End
  Validate Chop_Idle;
}

Partition
# This partition monitors chopping and adjust the online position
# to remain on the power-normalized peak. It will also monitor
# online and offline power and adjust THG to achieve even power
# in both positions. (It is also possible to consider trying to
# update THG whenever the laser voltage changes, but that is
# probably harder.)

%{
  double pmncts; // prev_mean_online_normalized_ref_cts;
  // double cncts;  // cur_normalized_online_cts;
  // double cmncts; // cur_mean_online_normalized_ref_cts;
  HtrDAC_mV_t prev_LV, cur_LV;
  // int np_online;
  bool dither_enable = false;
%}

{ depending on (t_z4) {
    if ((LVstat_z4 & 0xA) == 0xA) {
      cur_LV = LaserV_z4;
    }
  }
}

State Chop_Active {
  depending on (mean_online_norm_ref_cts_z4 once) {
    if (LVstat_z4 & 0x8) { /* Chopping */
      if (dither_enable) {
        ci_sendfcmd(Cmd_Send_Quiet, "Laser Command Dither Online %s\n",
          ((mean_online_norm_ref_cts_z4 > pmncts) != (cur_LV > prev_LV)) ?
          "Down" : "Up");
      }
      prev_LV = cur_LV;
      pmncts = mean_online_norm_ref_cts_z4;
    } else {
      prev_LV = 0;
      pmncts = 0;
    }
  }
}

# Partition
# This pseudo partition monitors chopping and manipulation of the THG
# temperature to keep the peak power positioned optimally between
# the online ((BCtr_LVstat&0xF) == 0xA)
# and offline ((BCtr_LVstat&0xF) == 0xC) positions.
# The idea is to average the online and offline power readings,
# and adjust the THG temperature to move the peak toward the lower
# power position.
#
# This algo needs to be aware of the latencies in the BCtr_LasIn_mW
# data (currently somewhere between one and 3 samples.) This means:
#   -We should only consider 'fresh' power values: those reported when
#    BCtr_Pfresh is true.
#   -Power reported with the first sample in either online or offline
#    belongs to the previous mode's average (minimum 1 sample latency).
#   -Power reported with the second sample in either online or offline
#    should be discarded, as it frequently shows signs of transitional
#    values which are likely not representative of the actual laser
#    power.
%{
  int thg_prev_chop_mode = 0; // 0xA == online, 0xC == offline
  int thg_chop_mode_idx = 2; // 0==online, 1==offline, 2==other
  double thg_power[2];
  int thg_n_pwr;
  // bool thg_not_first;
  bool thg_peakup_enable = true;
  #define THG_DEADBAND 0.015
  #define THG_STEPSIZE 0.005
  #define THG_HARD_LOWER_LIMIT 36.3
  #define THG_HARD_UPPER_LIMIT 36.4
  #include "TM_average.h"
  TM_average<double> LasPwrAvg;
%}

{
  mV_offset_t curr_offline_delta;
  curr_offline_delta = LV_offdelta;
  HG_Temp_t curr_THG_Set_T;
  curr_THG_Set_T = THG_Set_T;
  
  depending on (t_z4) {
    int crnt_chop_mode;
    crnt_chop_mode = (LVstat_z4 & 0xF);
    if (crnt_chop_mode != thg_prev_chop_mode) {
      double avg_pwr;
      avg_pwr = LasPwrAvg();
      switch (thg_chop_mode_idx) {
        case 2: /* Not monitoring */
          if (crnt_chop_mode == 0xA) { /* online */
            thg_chop_mode_idx = 0;
          }
          break;
        case 0: /* Online */
          if (crnt_chop_mode == 0xC && avg_pwr >= 0) { /* offline */
            thg_power[0] = avg_pwr;;
            thg_chop_mode_idx = 1;
          } else {
            thg_chop_mode_idx = 2;
          }
          break;
        case 1: /* Offline */
          if (avg_pwr >= 0 && thg_peakup_enable) {
            double ratio;
            thg_power[1] = avg_pwr;
            ratio = (thg_power[0]-thg_power[1])/(thg_power[0]+thg_power[1]);
            if (fabs(ratio) > THG_DEADBAND) {
              double new_setpoint;
              new_setpoint = convert(curr_THG_Set_T) +
                    (((ratio > 0) != (curr_offline_delta > 0)) ? -1 : 1)
                    * THG_STEPSIZE;
              if (new_setpoint >= THG_HARD_LOWER_LIMIT &&
                  new_setpoint <= THG_HARD_UPPER_LIMIT) {
                ci_sendfcmd(Cmd_Send, "Meerstetter THG SetPoint %.4lf C\n",
                  new_setpoint);
              } else {
                msg(1, "THG algo setpoint (%.4lf C) rejected: outside range %.4lf to %.4lf",
                  new_setpoint, THG_HARD_LOWER_LIMIT, THG_HARD_UPPER_LIMIT);
              }
            }
          }
          thg_chop_mode_idx = 2; /* skip the next cycle */
          break;
        default:
          thg_chop_mode_idx = 2;
          break;
      }
      thg_prev_chop_mode = crnt_chop_mode;
    }
    LasPwrAvg(convert(LasIn_mW_z3));
  }
}

Partition
# This partition controls calibration sequences

State Cal_Idle {}

State Cal_Zero_60min{
        > Valve 1 On
        > Flow Zero Set SCCM 2500
        > Flag Set 99
 +20:00	> Flag Set 1
 +60:00 > Flow Zero Set SCCM 0
        > Flag Set 0
        > Valve 1 Off
        Validate Cal_Idle;
}

State Cal_Zero_15min{
        > Valve 1 On
        > Flow Zero Set SCCM 2500
        > Flag Set 99
 +20:00	> Flag Set 1
 +15:00 > Flow Zero Set SCCM 0
        > Flag Set 0
        > Valve 1 Off
        Validate Cal_Idle;
}

State Cal_Span_SingleConc{
        > Valve 1 On
        > Valve 2 On
        > Flow Zero Set SCCM 4000
        > Flag Set 99
 +20:00	> Flag Set 1
 +10:00	> Flow Span Set SCCM 100
        > Flag Set 99
+120:00	> Flag Set 2
+180:00 > Flow Span Set SCCM 0
        > Valve 2 Off
        > Flag Set 1
 +30:00 > Flow Zero Set SCCM 0
        > Flag Set 0
        > Valve 1 Off
        Validate Cal_Idle;
}

State Cal_Span_StepConc{
        > Valve 1 On
        > Valve 2 On
        > Flow Zero Set SCCM 4000
        > Flag Set 99
 +20:00	> Flag Set 1
 +30:00	> Flow Span Set SCCM 100
        > Flag Set 99
+120:00	> Flag Set 2
+180:00	> Flow Zero Set SCCM 1500
        > Flag Set 3
+180:00	> Flow Zero Set SCCM 2250
        > Flag Set 4
+180:00 > Flow Span Set SCCM 0
        > Valve 2 Off
        > Flag Set 1
+180:00	> Flow Zero Set SCCM 0
        > Flag Set 0
        > Valve 1 Off
        Validate Cal_Idle;
}

Partition
# This partition enables or disables pump-purge cycles

State PumpPurge_Idle{}

State PumpPurge_Disable {
        > Flow Zero Set SCCM 0
        > Valve 1 Off
        Validate PumpPurge_Idle;
}

State PumpPurge_Enable{
        > Valve 1 On
        > Flow Zero Set SCCM 3500
        > Flag Set 98
  +5:00	> Flow Zero Set SCCM 0
        > Valve 1 Off
        > Flag Set 97
  +5:00 > Flag Set 0
        Validate PumpPurge_Enable;
}
