%{
  #include <math.h>
  #include "SB.h"
  #define BCtr_rd(x) (SB.BCtr ? SB.BCtr->sbrd(x) : 0)
  #define PPS_DELAY 70 /* How many samples to take for running min */
  double PPS_drift_record[PPS_DELAY];
  int PPS_sample;
%}
TM typedef double PPS_Seconds { text "%6.4lf"; }
TM typedef uint16_t PPS_t {
  text "%6.4lf";
  convert PPS_Seconds;
}
Calibration (PPS_t, PPS_Seconds) { 0, 0, 48828.125, 1 }
TM typedef double PPS_msecs { text "%7.2lf"; }
TM typedef int16_t PPS_fine_t { text "%6d"; }
TM typedef uint8_t IPS_stat_t { text "%3d"; }

/* TM 10 Hz PPS_t PPS_time; collect PPS_time = BCtr_rd(0x60); */
TM 1  Hz PPS_fine_t PPS_fine; collect PPS_fine = BCtr_rd(0x61);
TM 1  Hz PPS_fine_t IPS_fine; collect IPS_fine = BCtr_rd(0x73);
TM 1  Hz PPS_fine_t IPS_err; collect IPS_err = BCtr_rd(0x74);
TM 1  Hz IPS_stat_t IPS_status; collect IPS_status = BCtr_rd(0x75);
